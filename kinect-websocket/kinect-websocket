#! /usr/bin/env node

var fs = require('fs');
var Buffer = require('buffer').Buffer;
var WebSocketServer = require('ws').Server;
var mdns = require('mdns');
var LZ4 = require('lz4')
var program = require('commander');

program
  .version('0.0.1')
  .option('-f, --fifo <fifo>', 'Kinect FIFO')
  .option('-l, --listen [interface]', 'Listen on [0.0.0.0]', '0.0.0.0')
  .option('-p, --port [port]', 'Listen on port [9000]', 9000)
  .parse(process.argv);

if (!program.fifo) {
  program.help();
}

var wss = new WebSocketServer({host: program.interface, port: program.port});
wss.on('connection', function(ws) {
  console.log('New connection');
  ws.on('error', function() {
    console.log(arguments);
  });
});
wss.on('error', function() {
  console.log(arguments);
});

fs.open(program.fifo, 'r', function(err, fd) {
  if (err) {
    console.log(err);
    process.exit(1);
  }

  var buffer = new Buffer(640 * 480 * 2);
  var compressedBuffer = new Buffer(LZ4.encodeBound(buffer.length));

  function readAndSendChunk() {
    bytesRead = 0;
    while (bytesRead < buffer.length) {
      bytesRead += fs.readSync(fd, buffer, bytesRead, buffer.length - bytesRead)
      if (bytesRead == 0) {
        console.log('Read error');
        process.exit(1);
      }
    }

    var compressedSize = LZ4.encodeBlockHC(buffer, compressedBuffer);
    var output = compressedBuffer.slice(0, compressedSize);

    for (var i in wss.clients) {
      try {
        wss.clients[i].send(output, {binary: true});
      } catch (ex) {
        console.log('Caught exception: ' + ex);
      }
    }

    setImmediate(readAndSendChunk)
  }

  readAndSendChunk();
});

var ad = mdns.createAdvertisement(mdns.tcp('kinect-ws'), parseInt(program.port));
ad.start();
