<div id="overlay"></div>
<canvas id="live-canvas"></canvas>

<script id="vs" type="x-shader/x-vertex">
void main()
{
  gl_Position = vec4(position, 1.0);
}
</script>

<script id="fs" type="x-shader/x-fragment">
// Based on voronoi edges algorithm by Inigo Quilez
// http://www.iquilezles.org/www/articles/voronoilines/voronoilines.htm

precision mediump float;

uniform vec2 resolution;
uniform float time;
uniform float depthFar;
uniform sampler2D depthTexture;

#define ZOOM 16.0

float hash(float n) {
  return fract(sin(n) * 43758.5453);
}

vec2 hash2(vec2 p) {
  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);
}

void main(void) {
  vec2 p = gl_FragCoord.xy / resolution.xx;

  float depth = texture2D(depthTexture, p).x;

  if (depth > depthFar)
    discard;

  vec2 n = floor(ZOOM * p);
  vec2 fraction = fract(ZOOM * p);

  vec2 mg, mr;
  float md = ZOOM;
  float color = 0.0;

  for (int j = -1; j <= 1; j++) {
    for (int i = -1; i <= 1; i++) {
      vec2 g = vec2(float(i), float(j));
      vec2 o = hash2(n + g);
      o = 0.5 + 0.5 * sin(time + 6.2831 * o);
            vec2 r = g + o - fraction;
            float dist = dot(r,r);

            if (dist < md) {
                md = dist;
                mr = r;
                mg = g;
                color = 0.5 + 0.5 * hash(dot(n + g,vec2(7.0, 113.0)));
            }
        }
    }

    float shadow = 1.0;
    md = ZOOM;
    for (int j = -2; j <= 2; j++) {
      for (int i = -2; i <= 2; i++) {
        vec2 g = mg + vec2(float(i),float(j));
        vec2 o = hash2(n + g);
        o = 0.5 + 0.5 * sin(time + 6.2831 * o);
        vec2 r = g + o - fraction;
        float dist = dot(0.5 * (mr + r), normalize(r - mr));
        float c = 0.5 + 0.5 * hash(dot(n + g,vec2(7.0, 113.0)));
        if (c > color)
          shadow *= clamp(sqrt(10.0 * dist) / 2.0, 0.0, 1.0);

        if (dot(mr - r, mr - r) > 0.00001)
          md = min(md, dist);
      }
  }

  color *= shadow;
  color += (hash2(p).x - 0.5) / 1.3;
  color = mix(1.0, color, sqrt(5.0 * (depthFar - depth)));

  gl_FragColor = vec4(color, color, color, 1.0);
}
</script>

<script>
  var container;
  var camera, scene, renderer;
  var uniforms;
  var startTime;
  var canvas;
  var controls;
  var overlay;

  var depthTextureBuffer = null;

  init();
  animate();

  function init() {
    startTime = Date.now();
    canvas = document.getElementById('live-canvas');
    overlay = document.getElementById('overlay');

    camera = new THREE.Camera();
    camera.position.z = 1;

    scene = new THREE.Scene();

    var geometry = new THREE.PlaneGeometry(2, 2);

    uniforms = {
      time: { type: 'f', value: 1.0 },
      resolution: { type: 'v2', value: new THREE.Vector2() },
      depthFar: { type: 'f', value: 0.9 },
      depthTexture: { type: 't', value: null }
    };

    var material = new THREE.ShaderMaterial({
      uniforms: uniforms,
      vertexShader: document.getElementById('vs').textContent,
      fragmentShader: document.getElementById('fs').textContent,
    });

    var mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer({
      canvas: canvas,
      preserveDrawingBuffer: true
    });
    renderer.setClearColor(0xffffff, 1);

    onWindowResize();
    window.addEventListener('resize', onWindowResize, false);

    controls = new function() {
      this.depthFar = uniforms.depthFar.value;
    };

    var gui = new dat.GUI();
    gui.add(controls, 'depthFar', 0.0, 1.0);

    document.addEventListener('keydown', function(e) {
      if (e.keyCode == 70) { // 'f' key
        if (!document.fullscreenElement &&
            !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {
          if (document.documentElement.requestFullscreen) {
            document.documentElement.requestFullscreen();
          } else if (document.documentElement.msRequestFullscreen) {
            document.documentElement.msRequestFullscreen();
          } else if (document.documentElement.mozRequestFullScreen) {
            document.documentElement.mozRequestFullScreen();
          } else if (document.documentElement.webkitRequestFullscreen) {
            document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
          }
        } else {
          if (document.exitFullscreen) {
            document.exitFullscreen();
          } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
          } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
          } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
          }
        }
      } else if (e.keyCode == 80) { // 'p' key
        takepics();
      }
    }, false);

    function countdown(count, callback) {
      overlay.style.opacity = 0;
      overlay.textContent = count;
      var done = function() {
        count--;
        overlay.style.opacity = 0;
        if (count <= 0) {
          overlay.textContent = '';
          callback();
        } else {
          overlay.textContent = count;
          $(overlay).fadeTo(1000, 1, done);
        }
      };
      $(overlay).fadeTo(1000, 1, done);
    }

    function flash(callback) {
      overlay.style.opacity = 0;
      overlay.style.backgroundColor = 'white';
      $(overlay).fadeTo(250, 1, function() {
        $(overlay).fadeTo(250, 0, function() {
          overlay.style.backgroundColor = 'transparent';
          callback();
        });
      });
    }

    function takepic(count, callback) {
      var dataUrl = renderer.domElement.toDataURL("image/png");
      countdown(count, function() {
        flash(function() {
          callback(dataUrl);
        });
      });
    }

    function takepics() {
      var imgs = [];
      var callback = function(d) {
        console.log(d);
        imgs.push(d);
        if (imgs.length < 5) {
          takepic(1, callback);
        } else {
          sendpics(imgs);
        }
      };
      takepic(3,callback);
    }

    function sendpics(imgs) {
      $.post("/api/upload.json", {
        'images[]': imgs
      }, function(data, status) {
        console.log(data);
      });
    }

    canvas.onclick = function() {
      takepics();
    };
  }

  function onWindowResize(e) {
    var width = window.innerWidth / 2.0;
    var height = window.innerHeight / 2.0;
    uniforms.resolution.value.x = width;
    uniforms.resolution.value.y = height;

    renderer.setSize(width, height, false);

    overlay.style.lineHeight = window.innerHeight + 'px';
    overlay.style.fontSize = window.innerHeight + 'px';
  }

  function animate() {
    requestAnimationFrame(animate);
    render();
  }

  function render() {
    if (depthTextureBuffer != null) {
      var texture = new THREE.DataTexture(depthTextureBuffer, 320, 240, THREE.LuminanceFormat, THREE.FloatType);
      texture.minFilter = THREE.NearestFilter;
      texture.magFilter = THREE.NearestFilter;
      texture.needsUpdate = true;
      uniforms.depthTexture.value = texture;
    }
    if (controls.depthFar != uniforms.depthFar.value) {
      uniforms.depthFar.value = controls.depthFar;
    }
    uniforms.time.value = (Date.now() - startTime) / 1000;
    renderer.render(scene, camera);
  }

  var socket = new WebSocket('ws://' + window.location.host + '/live-socket');
  socket.binaryType = 'arraybuffer';
  socket.onmessage = function(e) {
    depthTextureBuffer = new Float32Array(e.data);
  };
</script>
